SimulatedNao = cppDynamicLibrary + {
  dependencies = { "Controller", "qtpropertybrowser", "libqxt" }

  root = "$(srcDirRoot)"

  precompiledHeader = {
    "$(srcDirRoot)/Tools/Precompiled/BHumanPch.h"
  }

  files = {
    "$(srcDirRoot)/Modules/**.cpp" = bhCppSource
    "$(srcDirRoot)/Modules/**.h"
    "$(srcDirRoot)/Platform/$(OS)/*.cpp" = bhCppSource
    "$(srcDirRoot)/Platform/$(OS)/*.h"
    "$(srcDirRoot)/Platform/*.cpp" = bhCppSource
    "$(srcDirRoot)/Platform/*.h"
    "$(srcDirRoot)/Representations/**.cpp" = bhCppSource
    "$(srcDirRoot)/Representations/**.h"
    "$(srcDirRoot)/Threads/**.cpp" = bhCppSource
    "$(srcDirRoot)/Threads/**.h"
    "$(srcDirRoot)/Tools/**.cpp" = bhCppSource
    "$(srcDirRoot)/Tools/**.h"
    "$(utilDirRoot)/asmjit/src/**.cpp" = cppSource

    if (configuration != "Release") {
      if (platform == "Linux") {
        -"$(srcDirRoot)/Modules/MotionControl/WalkingEngine/Walk2014Generator.cpp"
        -"$(srcDirRoot)/Modules/Sensing/FallDownStateDetector/FallDownStateProvider.cpp"
        -"$(srcDirRoot)/Modules/Sensing/InertialDataProvider/InertialDataProvider.cpp"
        -"$(srcDirRoot)/Representation/Sensing/RobotModel.cpp"
        -"$(srcDirRoot)/Tools/ImageProcessing/InImageSizeCalculations.cpp"
        -"$(srcDirRoot)/Tools/Math/**.cpp"
        -"$(srcDirRoot)/Tools/Modeling/UKFPose2D.cpp"
        -"$(srcDirRoot)/Tools/Motion/**.cpp"
      }
    }
  }
  files += pchFiles

  defines += {
    "TARGET_SIM"
    "ASMJIT_STATIC"
    "ASMJIT_BUILD_X86"
    "ASMJIT_NO_BUILDER"
    "ASMJIT_NO_COMPILER"
    "ASMJIT_NO_LOGGING"
    "ASMJIT_NO_TEXT"
    "ASMJIT_NO_INST_API"
    if (host == "Win32") {
      "_CRT_SECURE_NO_DEPRECATE"
    }
    if (configuration == "Develop") {
      -"NDEBUG"
    }
    if (configuration != "Debug") {
      "QT_NO_DEBUG"
    }
  }

  includePaths = {
    "$(srcDirRoot)"
    "$(utilDirRoot)/SimRobot/Util/Eigen"
    "$(utilDirRoot)/GameController/include"
    "$(utilDirRoot)/fftw-3.3"
    "$(utilDirRoot)/libjpeg/include"
    "$(utilDirRoot)/libqxt"
    "$(utilDirRoot)/qtpropertybrowser"
    "$(utilDirRoot)/SimRobot/Src/SimRobot"
    "$(utilDirRoot)/SimRobot/Src/SimRobotCore2"
    "$(utilDirRoot)/SimRobot/Src/SimRobotEditor"
    "$(utilDirRoot)/snappy/include"
    "$(utilDirRoot)/flite/include"
    "$(utilDirRoot)/hdf5/include"
    "$(utilDirRoot)/asmjit/src"
    if (host == "Win32") {
      "$(utilDirRoot)/SimRobot/Util/qt/Windows/include"
      "$(utilDirRoot)/SimRobot/Util/qt/Windows/include/QtCore"
      "$(utilDirRoot)/SimRobot/Util/qt/Windows/include/QtGui"
      "$(utilDirRoot)/SimRobot/Util/qt/Windows/include/QtOpenGL"
      "$(utilDirRoot)/SimRobot/Util/qt/Windows/include/QtWidgets"
      "$(utilDirRoot)/SimRobot/Util/glew/Windows/include"
      "$(utilDirRoot)/Buildchain/Windows/include"
    } else if (platform == "Linux") {
      "$(buildDir)"
      "$(qtinclude)"
      "$(qtinclude)/QtCore"
      "$(qtinclude)/QtGui"
      "$(qtinclude)/QtOpenGL"
      "$(qtinclude)/QtWidgets"
      "$(utilDirRoot)/SimRobot/Util/ode/Linux/include"
    }
  }

  libPaths = {
    "$(buildPlatformDir)/Controller/$(configuration)"
    "$(buildPlatformDir)/qtpropertybrowser/$(configuration)"
    "$(buildPlatformDir)/libqxt/$(configuration)"
    if (platform == "Linux") {
      "$(utilDirRoot)/fftw-3.3/Linux"
      "$(utilDirRoot)/hdf5/lib/Linux"
      "$(utilDirRoot)/flite/lib/Linux"
      "$(utilDirRoot)/libjpeg/lib/Linux"
      "$(utilDirRoot)/snappy/lib/Linux"
    } else if (host == "Win32") {
      "$(utilDirRoot)/fftw-3.3/Windows"
      "$(utilDirRoot)/SimRobot/Util/qt/Windows/lib"
      "$(utilDirRoot)/libjpeg/lib/Windows"
      "$(utilDirRoot)/snappy/lib/Windows"
      "$(utilDirRoot)/hdf5/lib/Windows"
    }
  }

  libs = {
    "Controller", "qtpropertybrowser", "qxt"
    if (host == "Win32") {
      if (configuration == "Debug") {
        "Qt5Cored", "Qt5Guid", "Qt5OpenGld", "Qt5Svgd", "Qt5Widgetsd"
        "snappyd"
      } else {
        "Qt5Core", "Qt5Gui", "Qt5OpenGl", "Qt5Svg", "Qt5Widgets"
        "snappy"
      }
      "winmm", "opengl32", "glu32", "ws2_32", "libjpeg", "libfftw3-3", "libfftw3f-3", "hdf5"
    } else if (platform == "Linux") {
      "Qt5Core", "Qt5Gui", "Qt5Network", "Qt5OpenGL", "Qt5Svg", "Qt5Widgets"
      "rt", "pthread", "GLEW", "GLU", "GL", "fftw3", "fftw3f", "jpeg", "snappy", "hdf5"
      "flite_cmu_us_slt", "flite_usenglish", "flite_cmulex", "flite", "asound"
    }
  }

  cppFlags += {
    if (tool == "vcxproj") {
      "/Zm200"
      if (avx2 == "true" ) {
        "/arch:AVX2"
      } else {
        "/arch:AVX"
      }
      if (configuration == "Develop") {
        -"/Ox"
        "/Od /ZI"
      } else if (configuration == "Release") {
        "/wd4101 /GS-"
      }
    } else {
      "-mmmx -msse -msse2"
      if (ssse3 == "true") {
        "-msse3 -mssse3"
      }
      if (avx2 == "true") {
        "-mavx -mavx2"
      }
      "-Wno-switch" // deactivating this is a problem because of the ENUM macro, since numOf<ENUM>s is never used in switch.
      "-Wconversion"
      "-Wno-sign-conversion"
      if (configuration == "Develop") {
        -"-O3 -fomit-frame-pointer", "-finline-functions -g"
      }
    }
  }

  linkFlags += {
    //the rpath specifies a searchpath for dynamic libraries.
    if (platform == "Linux") {
      " -Wl,-rpath -Wl,${ORIGIN}"
    } else if (platform == "MacOSX"){
      " -Wl,-rpath -Wl,${ORIGIN}/../Resources/"
    }
    if (tool == "vcxproj") {
      if (configuration == "Debug") {
        "/NODEFAULTLIB:msvcrt.lib"
      } else if (configuration == "Develop") {
        "/INCREMENTAL /DEBUG /SAFESEH:NO"
        -"/OPT:REF /OPT:ICF"
      }
    } else {
      if (configuration == "Develop") {
        -"-s"
      }
    }
  }

  visualizers = {
    "$(utilDirRoot)/Buildchain/Windows/Visualizers/Angle.natvis"
    "$(utilDirRoot)/SimRobot/Util/Eigen/debug/msvc/eigen.natvis"
  }
}
